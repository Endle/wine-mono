name: Wine-Mono CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  win-bash:

    runs-on: windows-2019
    steps:
    - name: Set up Cygwin
      uses: egor-tensin/setup-cygwin@v3
      with:
        platform: x64
        packages: unzip
    - name: Bash env
      shell: bash
      run: |
        uname --help
        uname -a
        ls
        ls mono

  win-test:

    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
          submodules: recursive
    - run: git config --global core.autocrlf input
    - name: Set up Cygwin
      uses: egor-tensin/setup-cygwin@v3
      with:
        platform: x64
        packages: autoconf automake bison gcc-core gcc-g++ mingw64-i686-runtime mingw64-i686-binutils mingw64-i686-gcc-core mingw64-i686-gcc-g++ mingw64-i686-pthreads mingw64-i686-w32api mingw64-x86_64-runtime mingw64-x86_64-binutils mingw64-x86_64-gcc-core mingw64-x86_64-gcc-g++ mingw64-x86_64-pthreads mingw64-x86_64-w32api libtool make python gettext-devel gettext intltool libiconv pkg-config git curl wget libxslt bc patch cmake perl yasm unzip
    - run: git config --global core.autocrlf input
      shell: bash
    - name: Build native Mono
      shell: bash
      run: |
        cd mono
        git config core.autocrlf input
        export PREFIX=$(pwd)/build_mono
        ./autogen.sh --prefix=$PREFIX --host=x86_64-w64-mingw32 --enable-msvc --disable-boehm
        make -j$(nproc)
        make install
    - name: Mono test
      shell: bash
      run: make check -j$(nproc)


        
  win-test-upsteream-mono:

    runs-on: windows-2019
    steps:
    - name: Set up Cygwin
      uses: egor-tensin/setup-cygwin@v3
      with:
        platform: x64
        packages: autoconf automake bison gcc-core gcc-g++ mingw64-i686-runtime mingw64-i686-binutils mingw64-i686-gcc-core mingw64-i686-gcc-g++ mingw64-i686-pthreads mingw64-i686-w32api mingw64-x86_64-runtime mingw64-x86_64-binutils mingw64-x86_64-gcc-core mingw64-x86_64-gcc-g++ mingw64-x86_64-pthreads mingw64-x86_64-w32api libtool make python gettext-devel gettext intltool libiconv pkg-config git curl wget libxslt bc patch cmake perl yasm unzip
    - name: Download upstream mono
      shell: bash
      run: |
        rm -rf mono
        git clone --depth=1 --recursive https://github.com/mono/mono.git
    - name: Build native Mono
      shell: bash
      run: |
        uname -a
        ls
        ls mono
        cd mono
        #sed -i 's/\r$//' file
        export PREFIX=$(pwd)/build_mono
        ./autogen.sh --prefix=$PREFIX --host=x86_64-w64-mingw32 --disable-boehm
        make -j$(nproc)
        make install
    - name: Mono test
      shell: bash
      run: cd mono && make check -j$(nproc)
  build:

    runs-on: ubuntu-20.04

    steps:
    - name: fail
      run: exit 1
    - uses: actions/checkout@v2
      with:
          submodules: recursive

    - name: Remove packages require EULA
      run: sudo apt remove msodbcsql17 linux-azure linux-cloud-tools-azure linux-headers-azure linux-image-azure linux-tools-azure -y 1>&2
    - name: Install Wine
      run: |
        sudo apt-get update 1>&2
        sudo apt install --install-recommends wine64 wine64-tools -y 1>&2
    - name: Install Mono Build Dependencies
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF 1>&2
        echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
        sudo apt update 1>&2
        sudo apt-get install mono-devel mono-complete libtool-bin gettext cmake dos2unix libgdiplus zip g++ -y 1>&2
        # Seems that Github Action Image already includes mono-devel. Still install it explicitly
    - name: Check Environment
      run: |
        gcc --version 1>&2
        g++ --version 1>&2
        wine --version 1>&2
        mono --version 1>&2
        ld --version 1>&2
        cmake --version 1>&2
        man libtool | tail -1 1>&2
    - name: make
      run: (make -j$(nproc) &> build-output.log && touch build-succeeded) || true
    - name: make logging capture
      uses: actions/upload-artifact@v2
      with:
        name: make log
        path: build-output.log
    - name: check build result
      run: test -f build-succeeded
    - name: msi capture
      uses: actions/upload-artifact@v2
      with:
        name: make msi output
        path: wine-mono-*.msi
    - name: bin capture
      uses: actions/upload-artifact@v2
      with:
        name: make bin output
        path: wine-mono-*.tar.xz
    - name: bin capture
      uses: actions/upload-artifact@v2
      with:
        name: make tests-zip output
        path: wine-mono-*-tests.zip

  linux-test:

    runs-on: ubuntu-20.04
    needs: build

    steps:
    - name: Remove packages require EULA
      run: sudo apt remove msodbcsql17 linux-azure linux-cloud-tools-azure linux-headers-azure linux-image-azure linux-tools-azure -y 1>&2
    - name: Install Wine
      run: |
        sudo dpkg --add-architecture i386 1>&2
        wget -nc https://dl.winehq.org/wine-builds/winehq.key 1>&2
        sudo apt-key add winehq.key 1>&2
        sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ focal main' 1>&2
        sudo apt update 1>&2
        sudo apt install --install-recommends -y winehq-devel 1>&2
    - name: Download Wine Mono msi
      uses: actions/download-artifact@v2
      with:
        name: make msi output
    - name: Install Wine Mono msi
      run: wine msiexec /i wine-mono-*.msi 1>&2
    - name: Run 64-bit Wine mscoree tests
      run: |
        wget -nc 'http://test.winehq.org/builds/winetest64-latest.exe' 1>&2
        wine winetest64-latest.exe -x winetest64 >/dev/null
        for testname in `wine winetest64/mscoree_test.exe --list 2>/dev/null|sed 's/\r//'|tail -n +2`; do
          echo BEGIN $testname TEST >>winetest64-output.log
          wine64 winetest64/mscoree_test.exe $testname >>winetest64-output.log 2>&1 || printf '::warning mscoree:%s test failed\n' $testname
          echo END $testname TEST >>winetest64-output.log
        done
    - name: Run 32-bit Wine mscoree tests
      run: |
        wget -nc 'http://test.winehq.org/builds/winetest-latest.exe' 1>&2
        wine winetest-latest.exe -x winetest >/dev/null
        for testname in `wine winetest/mscoree_test.exe --list 2>/dev/null|sed 's/\r//'|tail -n +2`; do
          echo BEGIN $testname TEST >>winetest-output.log
          wine winetest/mscoree_test.exe $testname >>winetest-output.log 2>&1 || printf '::warning mscoree:%s test failed\n' $testname
          echo END $testname TEST >>winetest-output.log
        done
    - name: linux test output capture
      uses: actions/upload-artifact@v2
      with:
        name: linux test output
        path: ./*.log

  mac-test:
    runs-on: macos-latest
    needs: build

    steps:
    - name: Install Wine
      run: |
        brew install --cask xquartz
        brew tap homebrew/cask-versions
        brew install --cask --no-quarantine wine-devel
    - name: Download Wine Mono msi
      uses: actions/download-artifact@v2
      with:
        name: make msi output
    - name: Install Wine Mono msi
      run: wine64 msiexec /i wine-mono-*.msi 1>&2
    - name: Run 64-bit Wine mscoree tests
      run: |
        wget -nc 'http://test.winehq.org/builds/winetest64-latest.exe' 1>&2
        wine64 winetest64-latest.exe -x winetest64 >/dev/null
        for testname in `wine winetest64/mscoree_test.exe --list 2>/dev/null|sed 's/\r//'|tail -n +2`; do
          echo BEGIN $testname TEST >>winetest64-output.log
          wine64 winetest64/mscoree_test.exe $testname >>winetest64-output.log 2>&1 || printf '::warning mscoree:%s test failed\n' $testname
          echo END $testname TEST >>winetest64-output.log
        done



